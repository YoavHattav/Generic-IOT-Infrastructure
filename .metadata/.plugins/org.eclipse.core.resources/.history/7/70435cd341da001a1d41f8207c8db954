package il.co.ilrd.iot;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.function.Function;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import com.google.gson.JsonObject;

import il.co.ilrd.iot.Dispatcher.Callback;

public class JarLoader {
	SingletonCommandFactory factory;
	Callback<String> cb = new Callback<String>(this::load, null);
	Dispatcher<String> dispacher = null;
	
	public JarLoader(Dispatcher<String> dispacher) {
		factory = SingletonCommandFactory.getInstance();
		this.dispacher = dispacher;
		dispacher.register(cb);
	}

	@SuppressWarnings("unchecked")
	public void load(String jarPath) {
		List<Class<?>> commandClasses = getCommandClasses(jarPath);
		for (Class<?> commandClass : commandClasses) {
			String key = null;
			Function<JsonObject, Command> cTor = null;
			try {
				key = (String) commandClass.getMethod("getKey").invoke(null);
				cTor = (Function<JsonObject, Command>) commandClass.getMethod("getCommandInstance").invoke(null);
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SecurityException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			factory.Add(key, cTor);
		}
	}

	private List<Class<?>> getCommandClasses(String jarPath) {
		List<Class<?>> commandClassList = new ArrayList<>();
		List<Class<?>> classList = getClassList(jarPath);
		for (Class<?> currClass : classList) {
			if (Command.class.isAssignableFrom(currClass)) {
				commandClassList.add(currClass);
			}
		}
		return commandClassList;
	}

	private List<Class<?>> getClassList(String jarPath) {
		JarFile jarFile = new JarFile(jarPath);
        Enumeration allEntries = jarFile.entries();
        while (allEntries.hasMoreElements()) {
            JarEntry entry = (JarEntry) allEntries.nextElement();
            String name = entry.getName();
            System.out.println(name);
        }		return null;
	}
	 
}
